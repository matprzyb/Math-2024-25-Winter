---
title: Matrix Inversion Using Gauss-Jordan Method
jupyter: python3
---


```{python}
from sympy import Matrix, Rational, latex
from IPython.display import display, Markdown, Math, HTML

class InvertibleMatrix:
    def __init__(self, matrix):
        """
        Initializes a matrix to be inverted using the Gauss-Jordan method.
        
        Parameters:
        - matrix: The square matrix to be inverted.
        """
        # Convert all entries to Rational numbers
        self.matrix = Matrix(matrix).applyfunc(Rational)
        self.operations = []
        
        # Check if the matrix is square
        if self.matrix.rows != self.matrix.cols:
            raise ValueError("The matrix must be square.")
        
        # Create the augmented matrix with the identity matrix (with Rational entries)
        identity = Matrix.eye(self.matrix.rows).applyfunc(Rational)
        self.aug_matrix = self.matrix.row_join(identity)
        
        display(Markdown("**Initial Matrix (Starting matrix):**"))
        self.display_matrix()
    
    def __repr__(self):
        return repr(self.aug_matrix)
    
    def __str__(self):
        return str(self.aug_matrix)
    
    def _repr_latex_(self):
        return self.aug_matrix._repr_latex_()
    
    def _validate_row_number(self, row):
        if not isinstance(row, int):
            raise TypeError("Row number must be an integer.")
        if row < 1 or row > self.aug_matrix.rows:
            raise IndexError(f"Row number must be in the range from 1 to {self.aug_matrix.rows}.")
        return row - 1
    
    def add_row(self, target_row, source_row, coefficient):
        target_idx = self._validate_row_number(target_row)
        source_idx = self._validate_row_number(source_row)
        coefficient = Rational(coefficient)
        
        self.aug_matrix.row_op(target_idx, lambda v, j: v + coefficient * self.aug_matrix[source_idx, j])
        
        operation_str = f"r{target_row} = r{target_row} + {coefficient}*r{source_row}"
        self.operations.append(operation_str)
        display(Markdown(f"**Operation:** {operation_str}"))
        self.display_matrix()
    
    def multiply_row(self, row, coefficient):
        row_idx = self._validate_row_number(row)
        coefficient = Rational(coefficient)
        
        self.aug_matrix.row_op(row_idx, lambda v, _: coefficient * v)
        
        operation_str = f"r{row} = {coefficient}*r{row}"
        self.operations.append(operation_str)
        display(Markdown(f"**Operation:** {operation_str}"))
        self.display_matrix()
    
    def swap_rows(self, row1, row2):
        row1_idx = self._validate_row_number(row1)
        row2_idx = self._validate_row_number(row2)
        
        self.aug_matrix.row_swap(row1_idx, row2_idx)
        
        operation_str = f"Swap r{row1} <-> r{row2}"
        self.operations.append(operation_str)
        display(Markdown(f"**Operation:** {operation_str}"))
        self.display_matrix()
    
    def display_matrix(self):
        """Displays the left and right matrix side by side in LaTeX format."""
        left_matrix = self.aug_matrix[:, :self.matrix.cols]
        right_matrix = self.aug_matrix[:, self.matrix.cols:]
        
        # Generate LaTeX code for both matrices
        left_latex = latex(left_matrix)
        right_latex = latex(right_matrix)
        
        # Combine both matrices into a single display output
        combined_latex = r"""
        %s 
        \quad
        %s
        """ % (left_latex, right_latex)
        
        display(Math(combined_latex))
    
    def print_operations(self):
        display(Markdown("**Performed Operations:**"))
        for op in self.operations:
            print(op)
    
    def get_inverse(self):
        """Returns the inverse of the matrix after performing Gauss-Jordan elimination."""
        # Check if the left part of the augmented matrix is the identity matrix
        left_matrix = self.aug_matrix[:, :self.matrix.cols]
        if not left_matrix == Matrix.eye(self.matrix.rows):
            raise ValueError("The matrix has not been reduced to the identity matrix. Continue the operations.")
        # Return the right part of the augmented matrix as the inverse
        inverse_matrix = self.aug_matrix[:, self.matrix.cols:]
        display(Markdown("**Inverse Matrix:**"))
        display(Math(latex(inverse_matrix)))
        return inverse_matrix
```

**Example 1:**

```{python}
# Create an instance of the class with a matrix to be inverted
initial_matrix = [[2, 1], [5, 3]] # 2x2 matrix
m = InvertibleMatrix(initial_matrix) # Create an instance of the class
```

```{python}
import sympy as sp # import the sympy library
a = sp.Matrix(initial_matrix) # create the initial matrix
print("The inverse matrix is:")
a.inv() # calculate the inverse matrix
```

```{python}
# Add -5/2 times "row 1" to "row 2"
m.add_row(2, 1, -5/2)
```

```{python}
# Multiply "row 1" by 1/2
m.multiply_row(1, 1/2)
```

```{python}
# Add -1 times "row 2" to "row 1"
m.add_row(1, 2, -1)
```

```{python}
# Multiply "row 2" by 2
m.multiply_row(2, 2)
```

The matrix has been correctly computed!

**Example 2**

```{python}
initial_matrix = [[2, 1, 2], [5, 3, 1], [1, 1, 5]] # 3x3 matrix
m = InvertibleMatrix(initial_matrix) # Create an instance of the class
sympy_m = sp.Matrix(initial_matrix) # create the initial matrix
```

```{python}
inverse = sympy_m.inv() # calculate the inverse matrix
inverse
```

```{python}
m.add_row(2, 3, -5)
```

```{python}
m.add_row(3, 1, -1/2)
```

```{python}
m.multiply_row(3, 4)
```

```{python}
m.add_row(3, 2, 1)
```

```{python}
m.multiply_row(3, -1/8)
```

```{python}
m.multiply_row(2, -1/2)
```

```{python}
m.add_row(2, 3, -12)
```

```{python}
m.add_row(1, 3, -2)
```

```{python}
m.add_row(1, 2, -1)
```

```{python}
m.multiply_row(1, 1/2)
```

---

## Exercises for Students

Find the inverse matrices using the Gauss method:

$$
A=
\begin{bmatrix}
1 & 2\\
3 & 4
\end{bmatrix}
, \qquad
B=
\begin{bmatrix}
1 & 2 & 3 \\
4 & 5 & 1 \\
2 & 3 & 2
\end{bmatrix}
,\qquad
C=
\begin{bmatrix}
0 & 0 & 1\\
0 & 1 & 0\\
1 & 0 & 0
\end{bmatrix}
$$
