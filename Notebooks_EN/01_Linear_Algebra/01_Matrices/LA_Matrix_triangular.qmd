---
title: Triangular Matrices and Determinant Calculation
jupyter: python3
---


```{python}
import sympy as sp
from sympy import Matrix, symbols, Rational
from IPython.display import display, Markdown

class SymbolicMatrix:
    def __init__(self, matrix):
        self.matrix = Matrix(matrix).applyfunc(Rational)
        self.operations = []
        display(Markdown("**Initial Matrix:**"))
        display(self.matrix)  # Display the matrix upon initialization

    def __repr__(self):
        return repr(self.matrix)  # Use Matrix's repr

    def __str__(self):
        return str(self.matrix)  # Use Matrix's str

    def _repr_latex_(self):
        return self.matrix._repr_latex_()  # Delegate LaTeX display

    def _validate_row_number(self, row):
        if not isinstance(row, int):
            raise TypeError("Row number must be an integer.")
        if row < 1 or row > self.matrix.rows:
            raise IndexError(f"Row number must be in the range from 1 to {self.matrix.rows}.")
        return row - 1

    def _validate_col_number(self, col):
        if not isinstance(col, int):
            raise TypeError("Column number must be an integer.")
        if col < 1 or col > self.matrix.cols:
            raise IndexError(f"Column number must be in the range from 1 to {self.matrix.cols}.")
        return col - 1

    # Row operations
    def add_row(self, target_row, source_row, coefficient):
        target_idx = self._validate_row_number(target_row)
        source_idx = self._validate_row_number(source_row)
        coefficient = Rational(coefficient)

        self.matrix.row_op(target_idx, lambda v, j: v + coefficient * self.matrix[source_idx, j])
        operation_str = f"r{target_row} = r{target_row} + {coefficient}*r{source_row}"
        self.operations.append(operation_str)
        display(Markdown(f"**Operation:** {operation_str}"))
        display(self.matrix)

    def multiply_row(self, row, coefficient):
        row_idx = self._validate_row_number(row)
        coefficient = Rational(coefficient)
        self.matrix.row_op(row_idx, lambda v, _: coefficient * v)
        operation_str = f"r{row} = {coefficient}*r{row}"
        self.operations.append(operation_str)
        display(Markdown(f"**Operation:** {operation_str}"))
        display(self.matrix)

    def swap_rows(self, row1, row2):
        row1_idx = self._validate_row_number(row1)
        row2_idx = self._validate_row_number(row2)
        self.matrix.row_swap(row1_idx, row2_idx)
        operation_str = f"Swap r{row1} <-> r{row2}"
        self.operations.append(operation_str)
        display(Markdown(f"**Operation:** {operation_str}"))
        display(self.matrix)

    # Column operations
    def add_col(self, target_col, source_col, coefficient):
        target_idx = self._validate_col_number(target_col)
        source_idx = self._validate_col_number(source_col)
        self.matrix.col_op(target_idx, lambda v, i: v + coefficient * self.matrix[i, source_idx])
        operation_str = f"c{target_col} = c{target_col} + {coefficient}*c{source_col}"
        self.operations.append(operation_str)
        display(Markdown(f"**Operation:** {operation_str}"))
        display(self.matrix)

    def multiply_col(self, col, coefficient):
        col_idx = self._validate_col_number(col)
        self.matrix.col_op(col_idx, lambda v, _: coefficient * v)
        operation_str = f"c{col} = {coefficient}*c{col}"
        self.operations.append(operation_str)
        display(Markdown(f"**Operation:** {operation_str}"))
        display(self.matrix)

    def swap_cols(self, col1, col2):
        col1_idx = self._validate_col_number(col1)
        col2_idx = self._validate_col_number(col2)
        self.matrix.col_swap(col1_idx, col2_idx)
        operation_str = f"Swap c{col1} <-> c{col2}"
        self.operations.append(operation_str)
        display(Markdown(f"**Operation:** {operation_str}"))
        display(self.matrix)

    # Display the operations performed
    def print_operations(self):
        display(Markdown("**Performed Operations:**"))
        for op in self.operations:
            print(op)

# Example usage
mat = [[1, 2, 3], [2, 5, 3], [3, 2, 1]]

m = SymbolicMatrix(mat) # instance of SymbolicMatrix class

# define the same matrix for computation check
original_matrix = sp.Matrix(mat)
```

```{python}
m.add_row(2, 1, -2)
```

```{python}
m.add_row(3, 1, -3)
```

```{python}
m.add_row(3, 2, 4)
```

The resulting matrix is an upper triangular matrix.

### Determinant of a Triangular Matrix

For a triangular matrix, the determinant is equal to the product of the elements on its diagonal.

```{python}
# The determinant of a triangular matrix is the product of the diagonal elements!
original_matrix.det() == 1 * 1 * (-20)
```

---
## Exercises for Students

Perform row and column operations to reduce the following matrices to an upper triangular form and calculate their determinants by taking the product of the diagonal elements.

1. 
$$
A = \begin{bmatrix}
12 & 3 \\
-18 & -4
\end{bmatrix}
$$

2.

$$
B = \begin{bmatrix} 
1 & 2 & 3 \\
4 & 5 & 6 \\
7 & 8 & 9 
\end{bmatrix}
$$